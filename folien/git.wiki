<[autotemplate]
documentclass={beamer}
usecolortheme={default}

setbeamertemplate={navigation symbols}{}
setbeamertemplate={blocks}[rounded][shadow=true]
setbeamercolor={block title}{bg=blue!20!white}
setbeamercolor={block body}{bg=blue!5!white}


usepackage=[utf8]{inputenc}
usepackage=[T1]{fontenc}
usepackage={graphicx}
usepackage={lmodern}
usepackage={dirtree}
titleframe=False
[autotemplate]>

\input{cc_beamer.tex}
\begin{frame}
    \title{Git-Workshop, Teil I}
    \subtitle{Freitagsrunde TechTalks, TU Berlin}
    \author{Julius Plenz}
    \date{25. November 2011}
    \titlepage
    \begin{center}
    \begin{tabular}[t]{lr}
        \mbox{\CcGroupByNcSa{0.83}{0.95ex}}  &
        \parbox[b]{7cm}{
        {\tiny Veröffentlicht unter der CreativeCommons-Lizenz (By, Nc, Sa)}\\
        {\tiny \url{http://wiki.freitagsrunde.org/TechTalks}}} \\
    \end{tabular}
\end{center}
\end{frame}

!==== Bevor wir beginnen \ldots ====

* Wer verwendet Linux? -- Windows? -- Mac?
* Wer arbeitet gelegentlich auf der Shell?
* Wer hat momentan noch ''kein'' Git installiert?

* Wer kennt oder hat schon mal eines der folgenden Systeme benutzt?
** CVS/RCS
** SVN
** Mercurial, Darcs, Perforce, Bazaar

!==== Wer kennt Git? ====

Wer hat schonmal ...
* @git@ eingegeben
* Ein Git-Repository selbst erstellt?
* ... oder geklont?
* Einen Commit gemacht?
* Per Git mit anderen Leuten zusammengearbeitet?

!==== Ablaufplan ====

* Teil I:
** Grundlegende Arbeitsschritte in Git
** Das Objektmodell -- eine theoretische Grundlage
** Parallele Entwicklung: Branches und Merges
** Entwicklung koordinieren: Ein Branching-Modell

* Teil II:
** Die Geschichte umschreiben: Rebase
** Verteiltes Git: Commits hoch- und runterladen
** Verschiedene Workflows
** Kollaboration live: Wir entwickeln gemeinsam ein Projekt
** Oder: Wunschkonzert -- was euch interessiert

* Teil I findet komplett ''lokal'' auf dem eigenen Rechner statt -- erst in Teil II nutzen wir die verteilten Eigenschaften von Git aus

!==== Motivation: Warum Versionskontrolle? ====

* '''Sicherheit:''' Versionskontrolle schützt vor Verlusten
* '''Dokumentation:''' Wer hat wann was gemacht?
* '''Fokussierung:''' Entwicklung logisch gliedern
* '''Kollaboration:''' Mit anderen Leuten an den gleichen Dateien arbeiten
* '''Partizipation:''' Jeder kann mitmachen (GitHub etc.)

!==== Interface ====

<<<bilder/shell-vs-gui.png,width=\textwidth>>>

!==== Wer bin ich? -- Name und E-Mail einstellen ====

* Für alle Projekte (wird in @\~{}/.gitconfig@ gespeichert)
** @git config -{}-global user.name "Max Mustermann"@
** \texttt{git config -{}-global user.email max@mustermann.de}

* ... oder alternativ nur für das aktuelle Projekt:
** \texttt{git config user.email maintainer@cool-project.org}

* Außerdem, für die, die wollen: Farbe!
** @git config -{}-global color.ui auto@

!==== Ein Projekt importieren oder erstellen ====

* Ein neues Projekt erstellt man wie folgt:
** @mkdir ''projekt''@
** @cd ''projekt''@
** @git init@

* Um ein bestehendes Projekt zu importieren, »klont« man es mit seiner gesamten Versionsgeschichte:
** \texttt{git clone git://git.plenz.com/\emph{git-tips}}

!==== Begriffsbildung ====

* '''Index'''/'''Staging Area''': Bereich zwischen dem Arbeitsverzeichnis und dem Repository, in die Änderungen für den nächsten '''Commit''' gesammelt werden
* '''Commit''': Eine Änderung an einer oder mehrerer Dateien, versehen mit Metadaten wie Autor, Datum und Beschreibung
* '''Repository''': Eine Datenbank für Commits, dort wird die Versionsgeschichte aufgezeichnet
* '''Referenz''': Jeder '''Commit''' wird durch eine eindeutige SHA1-Summe identifiziert. Eine Referenz »zeigt« auf einen bestimmten Commit
* '''Branch''': Ein »Zweig«, eine Abzweigung im Entwicklungszyklus, z.\,B. um ein neues Feature einzuführen.

!==== Ein typischer Arbeitsablauf ====

* Eine @''datei''@ verändern, und die Änderungen in das Repository »einchecken«:
# @vim ''datei''@
# @git status@
# @git add ''datei''@
# @git commit -m '\emph{datei} angepasst'@
# @git show@

!==== Index / Staging Area ====

* Im ''Index'' bzw. der ''Staging-Area'' werden Veränderungen für den nächsten Commit vorgemerkt
* So kann der Inhalt von einem Commit schrittweise aus einzelnen Veränderungen zusammengestellt werden

!==== Ausgangsstellung ====

* Alle auf dem gleichen Stand

<[center]
<<<bilder/index-stage1.pdf, scale=0.25>>>
[center]>

!==== Veränderungen machen ====

* Veränderungen werden im Working-Tree gemacht

<[center]
<<<bilder/index-stage2.pdf, scale=0.25>>>
[center]>

!==== Dem Index hinzufügen -- @git add@ ====

* Die Veränderungen im Working-Tree --> Index 

<[center]
<<<bilder/index-stage3.pdf, scale=0.25>>>
[center]>

!==== Einen Commit erzeugen -- @git commit@ ====

* Alle Veränderungen im Index --> Commit

<[center]
<<<bilder/index-stage4.pdf, scale=0.25>>>
[center]>

!==== Resultat ====

* Alle wieder  auf dem gleichen Stand

<[center]
<<<bilder/index-stage5.pdf, scale=0.25>>>
[center]>

==== @HEAD@ ====

<[block]{@HEAD@}
Der neuste Commit in der Versionsgeschichte wird als @HEAD@ bezeichnet.
[block]>

==== @git status@ -- Wie ist der Zustand? ====

<[block]{Status abfragen}
@git status@
[block]>

* Welche Dateien wurden modifiziert?
* Welche Veränderungen sind schon im Index?
* Gibt es Git nicht bekannte Dateien? (''untracked files'')

==== Dateien dem Index hinzufügen ====

<[block]{Alle Veränderungen in einer Datei hinzufügen}
@git add ''datei''@
[block]>

<[block]{Interaktives Hinzufügen}
@git add -p@
[block]>

<[block]{Interaktives Hinzufügen nur für eine Datei}
@git add -p ''datei''@
[block]>

==== Index: Unterschiede und Zurücksetzen ====

<[block]{Unterschiede zwischen Working-Tree und @HEAD@}
@git diff@
[block]>

<[block]{Unterschiede zwischen Index und Repository}
@git diff -{}-cached@
[block]>

<[block]{Index zurücksetzen}
@git reset@
[block]>

!==== Referenzen und ignorierte Dateien ====

Relative Referenzen:
* @HEAD@: Der letzte Commit (wird per @git show@ angezeigt)
* @HEAD$^\mathbf{\wedge}$@: Der vorletzte Commit
* @HEAD\textasciitilde{}''N''@: Der ''N''.-letzte Commit

==== Dateien ignorieren ====

Dateien ignorieren:
* Globbing-Muster in @.gitignore@ schreiben. Z.\,B.:
** @*.aux@
** @*.bak@
** @*.swp@
** @.gitignore@ (die Datei selbst)

!==== Informationen über das Repository erhalten ====

* Den jüngsten Commit im vollen Umfang anschauen:
** @git show@

* Die gesamte Versionsgeschichte, die zum aktuellen Zustand führt, anzeigen:
** @git log@

* Was hat sich verändert?
** @git diff@

* Das Repository visualisieren:
** @gitk@
* ... oder textbasiert:
** @tig@

!==== Änderungen rückgängig machen ====

Einen neuen Commit erstellen, der eine alte Änderung rückgängig macht:
* @git revert ''commit''@

Den Index zurücksetzen:
* @git reset HEAD@

Den Zustand von vor zwei Commits wiederherstellen:
* @git checkout HEAD\textasciitilde{}2@

Die Version von \emph{datei} anschauen, wie sie vor zwei Commits war:
* @git show HEAD\textasciitilde{}2:''datei''@

Die letzten zwei Commits _red_'''unwiederbringlich'''_ löschen:
* @git reset -{}-hard HEAD\textasciitilde{}2@

!==== Branches: Abzweigungen ====

Wir arbeiten schon die ganze Zeit im @master@-Branch!
--.5cm--

Was genau sind Branches? -- Nichts anderes als Referenzen auf den jeweils
obersten Commit einer Versionsgeschichte.
--.5cm--

Branches ...
* erstellen: @git branch ''name''@
* auschecken: @git checkout ''name''@
* erstellen und direkt auschecken: @git checkout -b ''name''@
* auflisten: @git branch -v@
* löschen: @git branch -d ''name''@

--.5cm--
Idealisierter Workflow: Ein Branch pro neuem Feature oder Bugfix.

!==== Beispiel: Zwei Branches ====

Zwei Branches erstellen, und auf jedem einen Commit machen. Dann das
Resultat in @gitk@ anschauen.

* @git branch eins@
* @git checkout eins@
* Commit machen
* @git checkout master@
* @git checkout -b zwei@
* Commit machen
* @gitk -{}-all@

!==== Beispielprojekt: Was wollen wir speichern ====

Angenommen, wir wollen folgendes Verzeichnis speichern:

--0.5cm--

\dirtree{%
.1 /.
.2 hello.py.
.2 README.
.2 test/.
.3 test.sh.
}

!==== Objektmodell ====

* ''Blob'': Enthält den Inhalt einer Datei
* ''Tree'': Eine Sammlung von Tree- und Blob-Objekten
* ''Commit'': Besteht aus einer Referenz auf einen Tree mit zusätzlichen Informationen
** ''Author'' und ''Commiter''
** ''Parents''
** ''Commit-Message''

<[figure][ht]
<<<bilder/objekte.pdf, scale=0.6>>>
[figure]>

!==== SHA-1 IDs ====

* Objekte werden mit ''SHA-1 IDs'' identifiziert
* Dies ist der ''Objekt-Name''
* Wird aus dem Inhalt berechnet
* ''SHA-1'' ist eine sogenannte Hash-Funktion; sie liefert für eine Bit-Sequenz mit der maximalen Länge von $2^{64}-1$ Bit ($\approx$2 Exbibyte) in eine Hexadezimal-Zahl der Länge 40 (d.\,h.\ 160 Bits)
* Die resultierende Zahl ist eine von $2^{160} (\approx 1.5\cdot 10^{49})$ möglichen Zahlen und ziemlich einzigartig

<[figure][htp]
    <<<bilder/sha.pdf, scale=0.6>>>
[figure]>

!==== Objektverwaltung ====

* Alle Objekte werden von Git in der ''Objektdatenbank'' (genannt Repository) gespeichert
* Die Objekte sind durch ihre SHA-1 ID eindeutig adressierbar

* Für jede Datei erzeugt Git ein Blob-Objekt
* Für jedes Verzeichnis erzeugt Git ein Tree-Objekt
* Ein Tree-Objekt enthält die Referenzen (SHA1 IDs) auf die in dem Verzeichnis enthaltenen Dateien

!==== Zusammenfassung ====

Ein Git-Repository enthält Commits; diese wiederum referenzieren Trees und Blobs, sowie ihren direkten Vorgänger

<[figure][ht]
    <<<bilder/objekte-zusammenhang.pdf, scale=0.6>>>
[figure]>

[frame]>

!==== Commit Graph ====

Ein Repository ist ein ''Gerichteter Azyklischer Graph''\\
Engl.: Directed Acyclic Graph (DAG)

<[center]
<<<bilder/graph.pdf, scale=0.14>>>
[center]>

!==== Branches und Tags ====

Branches und Tags sind Zeiger auf Knoten in dem Graphen.\\
_white_Engl._

<[center]
<<<bilder/graph-mit-refs.pdf, scale=0.14>>>
[center]>

!==== Graph-Struktur ====

* Die gerichtete Graph-Struktur entsteht, da in jedem Commit Referenzen auf direkte Vorfahren gespeichert sind

* Integrität kryptographisch gesichert

* Git-Kommandos manipulieren die Graph-Struktur

!==== Merging: Branches Zusammenfügen ====

Simple Merge:
* @git merge ''neues-feature''@

--.5cm--

Fast-Forward Merge:
* Wird @''topic''@ in @''master''@ gemerget und @''topic''@ basiert auf @''master''@, dann wird kein Merge-Commit erstellt, sondern nur der Zeiger »weitergerückt« bzw. »vorgespult«.

!==== Vor dem Merge ====

<[center]
<<<bilder/merge-vorher.pdf,scale=0.12>>>
[center]>

* @topic@ ist fertig und soll in @master@ integriert werden

!==== Nach dem Merge ====

<[center]
<<<bilder/merge-nachher.pdf,scale=0.12>>>
[center]>

* Im @master@ ausführen: @git merge topic@

!====  Vor dem Fast-Forward ====

<[center]
<<<bilder/ff-vorher.pdf,scale=0.12>>>
[center]>

* In @master@ hat sich nichts getan, @topic@ ist fertig

!====  Nach dem Fast-Forward ====

<[center]
<<<bilder/ff-nachher.pdf,scale=0.12>>>
[center]>

* @master@ wird »weitergerückt«, bzw. »vorgespult«

!==== Hilfe, Konflikte! ====

Bei einem @merge@ kann es zu Konflikten kommen. Wie geht man damit um?
* @vim ''konfliktdateien''@
* @git add ''konfliktdateien''@
* @git commit -m "''Merge-Konflikt behoben''"@

--.5em--
Das Unterfangen abbrechen:
* @git reset -{}-hard HEAD@

!==== Branch-Modell ====

* Dieses Modell wird in vielen OS-Projekten verwendet
* Es gibt vier Haupt-Branches:
** @maint@: Maintenance (Security und Bugfixes)
** @master@: Vorbereitung des neuen Releases
** @next@: Neue Features werden auf Stabilität getestet (Beta)
** @pu@: ''proposed updates'', unfertige, experimentelle Features
* @next@ und @pu@ werden möglicherweise verändert (neu aufgebaut, etc.)
* Bugfixes werden von @maint@ in @master@ übernommen
* Topic-Branches werden bei Vollendung in @next@ übernommen
* Wird @next@ stabil, wandern die Änderungen in den @master@

!==== Branch-Modell -- Visualisiert ====

<[center]
<<<bilder/branch-model.pdf, scale=0.17>>>
[center]>

!==== Ressourcen: Bücher ====

<[columns]
[[[ 2.5cm ]]]
<<<bilder/progit.png,width=\textwidth>>>
[[[ 7cm ]]]
* \textbf{Pro Git} von Scott Chacon, APress, 2009
* Kostenlos online verfügbar unter \url{http://progit.org/book/}
[columns]>

--.5cm--

<[columns]
[[[ 2.5cm ]]]
<<<bilder/gitbuch.png,width=\textwidth>>>
[[[ 7cm ]]]

* \textbf{Git. Verteilte Versionskontrolle für Code und Dokumente}, Open Source Press, 2011
* \url{http://gitbu.ch/}

[columns]>

!==== Ressourcen: Webseiten ====

* Webseite von Git: \url{http://git-scm.com/}
* Schnelle Übersicht: \url{http://gitref.org/}
* Tipps und Tricks: \url{http://gitready.com/}
* Hilfe bei Fragen: \url{http://stackoverflow.com/}
* Kostenlose Git-Repos: \url{http://github.com/}

!==== Vorbereitung Für Teil II ====

# Experimentiere mit den gelernten Kommandos
# Verursache und löse einen Merge-Konflikt
# Schau Dir den Google TechTalk von Linus Torvalds zum Thema Git an (von 2007)
# Informiere dich, wie ein OSS-Projekt deiner Wahl Git verwendet

* Und: Erstelle Dir einen Account bei GitHub o.\,Ä. -- nächstes Mal werden wir das brauchen!
* Bei Fragen und Wünschen: E-Mail schreiben!

!==== Danke! ====

Vielen Dank für eure Teilnahme!

--0.5cm--

Fragen und Feedback gerne per Mail:

--.2cm--

\begin{center}
julius@plenz.com
\end{center}

% Titelslide Teil II

!==== ====

    \title{Git-Workshop, Teil II}
    \subtitle{Freitagsrunde TechTalks, TU Berlin}
    \author{Julius Plenz}
    \date{2. Dezember 2011}
    \titlepage
    \begin{center}
    \begin{tabular}[t]{lr}
        \mbox{\CcGroupByNcSa{0.83}{0.95ex}}  &
        \parbox[b]{7cm}{
        {\tiny Veröffentlicht unter der CreativeCommons-Lizenz (By, Nc, Sa)}\\
        {\tiny \url{http://wiki.freitagsrunde.org/TechTalks}}} \\
    \end{tabular}
    \end{center}

!==== Ablaufplan ====

* Teil I:
** Grundlegende Arbeitsschritte in Git
** Das Objektmodell -- eine theoretische Grundlage
** Parallele Entwicklung: Branches und Merges
** Entwicklung koordinieren: Ein Branching-Modell

* Teil II:
** Die Geschichte umschreiben: Rebase
** Verteiltes Git: Commits hoch- und runterladen
** Verschiedene Workflows
** Kollaboration live: Wir entwickeln gemeinsam ein Projekt
** Oder: Wunschkonzert -- was euch interessiert

* Teil I findet komplett ''lokal'' auf dem eigenen Rechner statt -- erst in Teil II nutzen wir die verteilten Eigenschaften von Git aus

!==== Einen Commit ändern ====

* Commit ändern = Neuen Commit erstellen, alten wegschmeißen
* Den letzten Commit (@HEAD@) ändern:

# @\$EDITOR ''datei''@
# @git add ''datei''@
# @git commit -{}-amend@

* Tiefer liegende Commits (@HEAD\textasciitilde{}1@ etc.) können so nicht geändert werden!

!==== Rebase: Auf eine neue Basis bauen ====

* '''Rebase''': Einen Branch auf eine »neue Basis« stellen.
<[block]{@master@ als neue Basis für @''topic''@}
@git checkout ''topic''@ \\
@git rebase master@
[block]>

<[block]{Alternativ}
@git rebase master ''topic''@
[block]>

!==== Vor dem Rebase ====

<[center]
<<<bilder/rebase-vorher.pdf,scale=0.12>>>
[center]>

* @''topic''@ soll auf der neusten Version von @master@ basieren

!==== Nach dem Rebase ====

<[center]
<<<bilder/rebase-nachher.pdf,scale=0.12>>>
[center]>

* @git rebase master ''topic''@

!==== Rebasing ====

* '''Rebase''': Einen Branch auf eine »neue Basis« stellen:
** @git rebase master ''topic''@

* _red_'''Wichtig:'''_ Man darf '''''niemals''''' Commits aus einem bereits veröffentlichten Branch -- auf dem also womöglich Andere ihre Arbeit basieren -- durch @git rebase@ verändern!
** '''Daher: Nur Unveröffentlichtes gegen Veröffentlichtes rebasen:'''
*** @git rebase origin/master@
*** @git rebase v1.1.23@

!==== Rebase Interaktiv ====

* Das ist ''Advanced Git Magic'' -- und will geübt sein!
* Rebase-Prozess anhalten, Commits »mittendrin« ändern, weiterlaufen lassen

<[block]{Interaktives Rebase}
@git rebase -i master ''topic''@
[block]>

* Anwendungsfälle ''nur'' lokal und für die ''eigenen'' Commits
** Patch-Serie neu strukturieren
** Typos aus den eigenen Commits entfernen
** Offensichtliche Fehler glattbügeln

!==== Hinaus in die weite Welt! ====

* Wir wollen unsere Arbeit mit der anderer Entwickler austauschen!
* Durch die verteilte Architektur von @git@ braucht es keinen ''zentralen'' Server zu geben.
* Das Entwicklerteam muss sich auf einen ''Workflow'' einigen:
** Shared Repository
** Maintainer/Blessed Repository
** Patch-Queue per E-Mail
** ... oder auch alles durcheinandergemixt.

!==== Zentralisiert ====

<[figure][ht]
    <<<bilder/centralised.pdf, scale=0.35>>>
[figure]>

* Ein einziges zentrales Repository
* Alle Entwickler haben Schreibzugriff

!==== Öffentliche Entwickler-Repositories ====

<[figure][ht]
    <<<bilder/developer-public.pdf, scale=0.35>>>
[figure]>

* Ein öffentliches Repository pro Entwickler
* Der Projektleiter integriert Verbesserungen

!==== Patch-Queue per Email ====

<[figure][ht]
    <<<bilder/patches-per-mail.pdf, scale=0.32>>>
[figure]>

* Stark vom Kernel und Git selbst verwendet

!==== Remote Repositories / Remote Branches ====

Remote Repositories verwalten:
* @git remote -v@
* @git remote add ''name'' ''url''@
* @git remote rm ''name''@
* @git remote update@
** Fragt bei allen Remote Repositories an, ob es neue Commits gibt. (Eigene Commits werden durch dieses Kommando '''nicht''' veröffentlicht!)

Details der Repositories ändern (z.\,B. Vertipper):
* @vim .git/config@

Remote Branches auflisten:
* @git branch -r@

!==== Fremden Code holen, eigenen versenden ====

Aus einem anderen Repository neuen Code »ziehen«:
* @git pull ''remote'' ''branch''@
** @git pull blessed master@
Was hinter den Kulissen passiert:
# @git fetch ''remote'' ''branch''@
# @git merge ''remote''/''branch''@

--.5cm--
Eigene Commits »pushen« oder per E-Mail senden:
* @git push ''remote'' ''branch''@
* @git format-patch ''seit-wann''@

!==== GitHub -- „Social Coding“ ====

* GitHub stellt Git-Repositories zur Verfügung
** Kostenlos und viel genutzt
** Web-basiertes Interface
** Aktionen „Fork“, „Follow“ und „Watch“

* Account erstellen:
** --> @http://www.github.com@
** Authentifizierung per SSH-Schlüssel (ggf. erstellen)

* Ein eigenes Repository hochladen:
** Repository auf GitHub erstellen
** @git remote add ''github''@\\\qquad{}@ssh://git\@github.com:''user''/''projekt''.git@
** @git push ''github'' master@

==== Die Infrastruktur ====

<[figure]
<<<infrastruktur-crop.pdf, scale=0.6>>>
[figure]>

==== Wir tauschen uns aus ====

* Remote ''blessed'' klonen (read-only):
** @git clone -o blessed git://git.plenz.com/git-tips@
** @cd git-tips@
--.2cm--
* Schreibbares Repository eintragen: ''meins''
** \parbox[t]{9cm}{\texttt{git remote add meins}\\\texttt{\hspace*{1cm}ssh://tn01@git.plenz.com:2222/repos/tn01}}
--.2cm--
* Repository eines anderen Teilnehmers hinzufügen:
** @git remote add tn02 git://git.plenz.com/tn02@
--.2cm--
* Schauen, »wie weit« die anderen sind:
** @git remote update@
** @gitk -{}-all@

!==== Kür: Was noch fehlt ====

* Rebase
* @git stash@
* Remote Branches löschen
* Git-Aliase
* Tags
* Reflog
