<[autotemplate]
documentclass={beamer}
usecolortheme={default}

setbeamertemplate={navigation symbols}{}

usepackage=[utf8]{inputenc}
usepackage=[T1]{fontenc}
usepackage={graphicx}
usepackage={lmodern}
titleframe=False
[autotemplate]>

\input{cc_beamer.tex}
\begin{frame}
    \title{Git-Workshop}
    \subtitle{Chemnitzer Linuxtage 2010}
    \author{Valentin Hänel, Julius Plenz}
    \date{13. März 2010}
    \titlepage
    \begin{center}
    \begin{tabular}[t]{lr}
        \mbox{\CcGroupByNcSa{0.83}{0.95ex}}  &
        \parbox[b]{7cm}{
        {\tiny Veröffentlicht unter der CreativeCommons-Lizenz (By, Nc, Sa)}\\
        {\tiny \url{http://github.com/Feh/git-workshop/raw/pdf/folien/git.pdf}}} \\
    \end{tabular}
\end{center}
\end{frame}

==== Wer kennt wen? ====

Wer kennt oder hat schon mal eines der folgenden Systeme benutzt?
* CVS/RCS
* SVN
* Mercurial, Darcs, Perforce, Bazaar
* Git

==== Wer kennt Git? ====

Wer hat schonmal ...
* @git@ eingegeben
* Ein Git-Repository selbst erstellt?
* ... oder geklont?
* Einen Commit gemacht?
* Per Git mit anderen Leuten zusammengearbeitet?

==== Ablaufplan ====

* Zu Anfang führen wir in die einfachsten Git-Kommandos ein und üben einige wichtige Arbeitsschritte.

* Im zweiten Teil des Workshops wollen wir dann gemeinsam an einem Projekt arbeiten, um beispielhaft den Entwcklungsprozess einer Software zu demonstrieren.

==== Wer bin ich? -- Name und E-Mail einstellen ====

* Für alle Projekte (wird in @\~{}/.gitconfig@ gespeichert)
** @git config -{}-global user.name "Max Mustermann"@
** \texttt{git config -{}-global user.email max@mustermann.de}

* ... oder alternativ nur für das aktuelle Projekt:
** \texttt{git config user.email maintainer@cool-project.org}

* Außerdem, für die, die wollen: Farbe!
** @git config -{}-global color.ui auto@

==== Ein Projekt importieren oder erstellen ====

* Ein neues Projekt erstellt man wie folgt:
** @mkdir ''projekt''@
** @cd ''projekt''@
** @git init@

* Um ein bestehendes Projekt zu importieren, »klont« man es mit seiner gesamten Versionsgeschichte:
** \texttt{git clone git://git.plenz.com/\emph{git-tips}}

==== Begriffsbildung ====

* '''Index'''/'''Staging Area''': Bereich zwischen dem Arbeitsverzeichnis und dem Repository, in die Änderungen für den nächsten '''Commit''' gesammelt werden
* '''Commit''': Eine Änderung an einer oder mehrerer Dateien, versehen mit Metadaten wie Autor, Datum und Beschreibung
* '''Referenz''': Jeder '''Commit''' wird durch eine eindeutige SHA1-Summe identifiziert. Eine Referenz »zeigt« auf einen bestimmten Commit
* '''Branch''': Ein »Zweig«, eine Abzweigung im Entwicklungszyklus, z.\,B. um ein neues Feature einzuführen.

==== Ein typischer Arbeitsablauf ====

* Eine @''datei''@ verändern, und die Änderungen in das Repository »einchecken«:
# @vim ''datei''@
# @git status@
# @git add ''datei''@
# @git commit -m '\emph{datei} angepasst'@
# @git show@

==== Referenzen und ignorierte Dateien ====

Relative Referenzen:
* @HEAD@: Der letzte Commit (wird per @git show@ angezeigt)
* @HEAD\^{}@: Der vorletzte Commit
* @HEAD\~{}''N''@: Der ''N''.-letzte Commit

--.5cm--
Dateien ignorieren:
* Globbing-Muster in @.gitignore@ schreiben. Z.\,B.:
** @*.aux@
** @*.bak@
** @*.swp@
** @.gitignore@ (die Datei selbst)

==== Informationen über das Repository erhalten ====

* Den jüngsten Commit im vollen Umfang anschauen:
** @git show@

* Die gesamte Versionsgeschichte, die zum aktuellen Zustand führt, anzeigen:
** @git log@

* Was hat sich verändert?
** @git diff@

* Das Repository visualisieren:
** @gitk@
* ... oder textbasiert:
** @tig@

==== Änderungen rückgängig machen ====

Einen neuen Commit erstellen, der eine alte Änderung rückgängig macht:
* @git revert ''commit''@

TODO

==== Branches: Abzweigungen ====

Wir arbeiten schon die ganze Zeit im @master@-Branch!
--.5cm--

Was genau sind Branches? -- Nichts anderes als Referenzen auf den jeweils
obersten Commit einer Versionsgeschichte.
--.5cm--

Branches ...
* erstellen: @git branch ''name''@
* auschecken: @git checkout ''name''@
* erstellen und direkt auschecken: @git checkout -b ''name''@
* auflisten: @git branch -v@
* löschen: @git branch -d ''name''@

--.5cm--
Idealisierter Workflow: Ein Branch pro neuem Feature oder Bugfix.

==== Beispiel: Zwei Branches ====

Zwei Branches erstellen, und auf jedem einen Commit machen. Dann das
Resultat in @gitk@ anschauen.

* @git branch apfel@
* @git checkout apfel@
* Commit machen
* @git checkout master@
* @git checkout -b birne@
* Commit machen
* @gitk -{}-all@

==== Merging: Branches Zusammenfügen ====

Simple Merge:
* @git merge ''neues-feature''@

--.5cm--

Fast-Forward Merge:
* Wird @''topic''@ in @''master''@ gemerget und @''topic''@ basiert auf @''master''@, dann wird kein Merge-Commit erstellt, sondern nur der Zeiger »weitergerückt« bzw. »vorgespult«.

==== Hilfe, Konflikte! ====

Bei einem @merge@ kann es zu Konflikten kommen. Wie geht man damit um?
* @vim ''konfliktdateien''@
* @git add ''konfliktdateien''@
* @git commit -m "''Merge-Konflikt behoben''"@

--.5em--
Das Unterfangen abbrechen:
* @git reset HEAD@

==== Hinaus in die weite Welt! ====

* Wir wollen unsere Arbeit mit der anderer Entwickler austauschen!
* Durch die verteilte Architektur von @git@ braucht es keinen ''zentralen'' Server zu geben.
* Das Entwicklerteam muss sich auf einen ''Workflow'' einigen:
** Shared Repository
** Maintainer/Blessed Repository
** Patch-Queue per E-Mail
** ... oder auch alles durcheinandergemixt.

==== Remote Repositories / Remote Branches ====

Remote Repositories:
* @git remote -v@
* @git remote add ''name'' ''url''@
* @git remote update@
* @git remote rm ''name''@

Details der Repositories ändern:
* @vim .git/config@

Remote Branches auflisten:
* @git branch -r@

==== Wir tauschen uns aus ====

* Remote ''blessed'' klonen (read-only):
** @git clone -o blessed git://git.plenz.com/git-tips@
* Schreibbares Repository eintragen: ''meins''
** \texttt{git remote add meins ssh://tn01@git.plenz.com:2222/repos/tn01}
* Repository eines anderen Teilnehmers hinzufügen:
** @git remote add tn02 git://git.plenz.com/tn02@
* Schauen, »wie weit« die anderen sind:
** @gitk -{}-all@

==== Die Infrastruktur ====

<[figure]
<<<infrastruktur-crop.pdf, scale=0.6>>>
[figure]>

==== Fremden Code holen, eigenen versenden ====

Aus einem anderen Repository neuen Code »ziehen«:
* @git pull ''remote'' ''branch''@
** @git pull origin master@
Was hinter den Kulissen passiert:
# @git fetch ''remote'' ''branch''@
# @git merge ''remote''/''branch''@

--.5cm--
Eigene Commits »pushen« oder per E-Mail senden:
* @git push ''remote'' ''branch''@
* @git format-patch ''seit-wann''@

==== Kür: Was noch fehlt ====

* Rebase
* @git stash@
* Remote Branches löschen
* Git-Aliase
* Tags
* Reflog

==== Rebasing ====

* '''Rebase''': Einen Branch auf eine »neue Basis« stellen:
** @git rebase master ''topic''@

* Interaktiv Commits neu ordnen, bearbeiten, zusammenfassen oder aufteilen:
** @git rebase -i HEAD\~{}5@

* _red_'''Wichtig:'''_ Man darf '''''niemals''''' Commits aus einem bereits veröffentlichten Branch -- auf dem also womöglich Andere ihre Arbeit basieren -- durch @git rebase@ verändern!
** '''Daher: Nur Unveröffentlichtes gegen Veröffentlichtes rebasen:'''
*** @git rebase origin/master@
*** @git rebase v1.1.23@

