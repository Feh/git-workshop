Hier werden sowohl die Kommandos beschrieben die wir vorführen wollen, und auch
zusätzliche Beispiele die wir verwenden können.

==== Namen und Email einstellen: ====

Einsehen:

    git config --get user.name
    git config --get user.email

Setzen:

    git config --global user.name Max Mustermann
    git config --get user.name

Zurück:

    git config --global user.name Valentin Haenel
    git config --get user.name

==== Projekt Erstellen ====

    mkdir demo
    cd demo
    git init

TODO: hier nochmal config üben?

==== Arbeitsablauf ====

    vim datei (one line)
    git status
    git add datei
    git status
    git commit -m "erster commit"
    git show

Extra - Mit einem leeren commit beginnen:

    git init 
    git commit --allow-empty -m "Zero"
    git tag 0

==== Informationen ====

Einfach:

    git log

Grafisch:

    gitk --all

Konsole:

    tig

Welche auswirkungen hat ein Commit:

    vim datei (next line)
    git diff
    git commit -a -m "eine Zeile hinzugefügt"

    git log
    gitk --all
    tig

Extra - Log Formate:

    git log --pretty=oneline

==== Branches ====

Branch 'feature' erstellen:

    git branch feature
    git branch
    git checkout feature

Commits machen:

    vim datei
    git commit -a -m "commit im branch 'feature'"
    git checkout master
    vim datei
    git commit -a -m "commit im branch 'master'"

    gitk --all

Branch Löschen:

    git branch fehler
    git branch -d fehler

==== Merging  ====

Branch 'feature' mergen:

(WICHTIG die Modifikationen müssen so passiert sein das KEIN Konflikt entsteht,
evtl mit sed arbeiten?)

    git config --global merge.summary true

    git merge feature

    gitk

Fast forward:

    git checkout feature
    git merge master

    gitk

Extra - Cherry Pick:

TODO

==== Rebasing ====

Commits machen:

    vim file
    git commit -a -m "zweiter commit im branch 'feature'"
    git checkout master
    vim file
    git commit -a -m "zweiter commit im branch 'master'"

    gitk

Rebase!:

    git rebase master feature

    gitk

==== Konflikte ====

Commits machen:

(WICHTIG: einfach das Ende einer Zeile verändern um den Konflikt zu erzeugen.)

    git checkout feature
    vim file
    git commit -a -m "feature commit für konflikt"
    git checkout master
    vim file (Zeile anders verändern)
    git commit -a -m "master commit für konflikt"

    git merge

Konflikt Marker zeigen und löschen.

    vim file
    git add file
    git commit

So, jetzt gehts weiter...

==== Remote ====

Wir tun mal so als wären wir Teilnehmer:

    git clone git://git.plenz.com/git-tips
    git remote add meins ssh://tn01@git.plenz.com/repos/tn01
    vim datei

Integration der Veränderungen:

    pull von teilnehmer repo
    merge
    push nach blessed

    gitk


==== Kür ====

Remote branch löschen:

Erstellen:

    git branch loesch-mich

Pushen:

    git push demo-remote loesch-mich
    git branch -a

Löschen:

    git branch -d loesch-mich
    git branch -a
    git push demo-remote :loesch-mich

(Ich glaube das funktioniert weil quasi kein ref gepushed wird.)

Branch erstellen der einen anderen root commit hat:

    git clean -fx
    git symbolic-ref HEAD refs/heads/branch-name
    git rm -r '*'
    git commit --allow-empty -m "zero"



git log -N}                            & die letzten @N@ anzeigen\\
git log COMMIT}                        & bis zu @COMMIT@ anzeigen \\
git log -{-}since="23 hours"}          & alle seit ... \\
git log -{-}before="42 days"}          & alle vor ... \\
git log -{-}pretty=oneline}            & ein ''commit'' pro Zeile \\
git log A..B}                          & alle zwischen {\tt A} und {\tt

git branch

git branch -a
git branch -v
